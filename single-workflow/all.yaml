apiVersion: v1
kind: ServiceAccount
metadata:
  name: operate-workflow-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: executor
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflowtaskresults
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: operate-workflow-role
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflowtemplates
  - cronworkflows
  - clusterworkflowtemplates
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: operate-workflow-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: operate-workflow-role
subjects:
- kind: ServiceAccount
  name: operate-workflow-sa
---
apiVersion: v1
data:
  example-s3: |
    s3:
      endpoint: s3.amazonaws.com
      bucket: example-bucket-name
      region: us-west-1
      useSDKCreds: true
      keyFormat: "prefix\
        /{{workflow.creationTimestamp.Y}}-\
        {{workflow.creationTimestamp.m}}-\
        {{workflow.creationTimestamp.d}}\
        /{{workflow.name}}\
        /{{pod.name}}"
kind: ConfigMap
metadata:
  annotations:
    workflows.argoproj.io/default-artifact-repository: example-s3
  name: example-artifact-repositories
---
apiVersion: v1
data:
  table-name: results
kind: ConfigMap
metadata:
  labels:
    workflows.argoproj.io/configmap-type: Parameter
  name: example-parameters
---
apiVersion: v1
data:
  DB_HOST: ZGIuaG9zdG5hbWU=
  DB_NAME: ZGF0YWJhc2VfbmFtZQ==
  DB_PASSWORD: c2VjcmV0UGFzc1cwcmQ=
  DB_PORT: MzYwMA==
  DB_USER: ZGF0YWJhc2VfdXNlcg==
kind: Secret
metadata:
  name: example-db-connect
type: Opaque
---
apiVersion: argoproj.io/v1alpha1
kind: EventBus
metadata:
  name: default
spec:
  nats:
    native:
      auth: token
      replicas: 3
---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: calendar
spec:
  calendar:
    every-37-minutes:
      interval: 37m
      metadata:
        names: '["Alice,Bob","Mortimer"]'
---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: webhook
spec:
  service:
    ports:
    - port: 12000
      targetPort: 12000
  webhook:
    trigger-pipeline:
      endpoint: /greet-and-count
      method: POST
      port: "12000"
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: start-pipeline
spec:
  dependencies:
  - eventName: trigger-pipeline
    eventSourceName: webhook
    name: wh-dep
  - eventName: every-37-minutes
    eventSourceName: calendar
    name: cal-dep
    transform:
      script: "math.randomseed(os.time())\nea = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"0\",\"p\"}\nresult
        = \"[\"\nlen = math.random(1,8)\nfor i=1,len do \n  local s = math.random(1,#ea-5)\n
        \ local e = math.random(i,#ea)\n  local names = '\"'\n  for n=s,e do\n    names
        = names..ea[n]\n    if n~=e then\n      names = names..\",\"\n    end\n  end\n
        \ names = names..'\"'\n  result = result..names\n  if i~=len then\n    result
        = result..\",\"\n  end\nend\nresult = result..\"]\"\nevent.metadata.names
        = result\nreturn event"
  template:
    serviceAccountName: operate-workflow-sa
  triggers:
  - template:
      argoWorkflow:
        operation: submit
        parameters:
        - dest: spec.arguments.parameters.0.value
          src:
            dataKey: body
            dependencyName: wh-dep
        - dest: spec.arguments.parameters.0.value
          src:
            dataKey: metadata.names
            dependencyName: cal-dep
        source:
          resource:
            apiVersion: argoproj.io/v1alpha1
            kind: Workflow
            metadata:
              generateName: greet-and-count-
            spec:
              arguments:
                parameters:
                - name: input-payload
                  value: '[]'
              workflowTemplateRef:
                name: single-wf-template
      conditions: wh-dep || cal-dep
      name: webhook-workflow-trigger
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: container-templates
spec:
  templates:
  - container:
      args:
      - --names
      - '{{inputs.parameters.names}}'
      - --greeting
      - '{{inputs.parameters.greeting}}'
      - --output-file
      - /tmp/out.txt
      command:
      - python
      - greet.py
      image: ghcr.io/nikita-akuity/greetings:latest
    inputs:
      parameters:
      - default: ""
        name: key-prefix
      - default: default
        name: greeting
      - default: Alice,Bob
        name: names
    name: greet
    outputs:
      artifacts:
      - archive:
          none: {}
        name: output-file
        path: /tmp/out.txt
  - container:
      args:
      - --input-file
      - /tmp/in.txt
      - --output-file
      - /tmp/out.txt
      - --search
      - '{{inputs.parameters.search}}'
      - --replace
      - '{{inputs.parameters.replace}}'
      command:
      - python
      - rt.py
      image: ghcr.io/nikita-akuity/replace-text:latest
    inputs:
      artifacts:
      - name: input-file
        path: /tmp/in.txt
      parameters:
      - name: input-key
      - default: ""
        name: key-prefix
      - default: default
        name: search
      - default: default
        name: replace
    name: replace-text
    outputs:
      artifacts:
      - archive:
          none: {}
        name: output-file
        path: /tmp/out.txt
  - container:
      args:
      - --input-file
      - /tmp/in.txt
      - --string
      - '{{inputs.parameters.string}}'
      command:
      - python
      - count.py
      image: ghcr.io/nikita-akuity/count:latest
    inputs:
      artifacts:
      - name: input-file
        path: /tmp/in.txt
      parameters:
      - default: default
        name: string
    name: count
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: script-templates
spec:
  templates:
  - inputs:
      parameters:
      - default: '["0","0","0"]'
        name: numbers
    name: sum
    script:
      command:
      - python
      image: python:3
      source: |
        import json
        numbers = json.loads('{{inputs.parameters.numbers}}')
        print(sum(map(int,numbers)))
  - inputs:
      artifacts:
      - name: sql
        path: /tmp/query.sql
        raw:
          data: |
            CREATE TABLE IF NOT EXISTS {{inputs.parameters.table-name}} (
              Id int NOT NULL AUTO_INCREMENT,
              WorkflowName varchar(255) NOT NULL,
              WorkflowDateTime datetime NOT NULL,
              SumHello int(32),
              SumGoodbye int(32),
              PRIMARY KEY (Id)
            );
            INSERT INTO {{inputs.parameters.table-name}} (WorkflowName, WorkflowDateTime, SumHello, SumGoodbye)
            VALUES (
              '{{workflow.name}}',
              '{{workflow.creationTimestamp.Y}}-{{workflow.creationTimestamp.m}}-{{workflow.creationTimestamp.d}} {{workflow.creationTimestamp.H}}:{{workflow.creationTimestamp.M}}:{{workflow.creationTimestamp.S}}',
              {{inputs.parameters.sum-hello}},
              {{inputs.parameters.sum-goodbye}}
            );
      parameters:
      - name: table-name
      - name: db-connection-secret
      - default: "NULL"
        name: sum-hello
      - default: "NULL"
        name: sum-goodbye
    name: write-to-db
    script:
      command:
      - bash
      envFrom:
      - secretRef:
          name: '{{inputs.parameters.db-connection-secret}}'
      image: mysql:8-debian
      source: |
        mysql --host=$DB_HOST --port=$DB_PORT --user=$DB_USER --password=$DB_PASSWORD $DB_NAME < /tmp/query.sql
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: single-wf-template
spec:
  arguments:
    parameters:
    - name: input-payload
      value: '[]'
    - name: mysql-table-name
      valueFrom:
        configMapKeyRef:
          key: table-name
          name: example-parameters
    - name: mysql-connection-secret
      value: example-db-connect
  artifactRepositoryRef:
    configMap: example-artifact-repositories
    key: example-s3
  entrypoint: single-wf
  templates:
  - name: single-wf
    steps:
    - - arguments:
          parameters:
          - name: names
            value: '{{item}}'
        name: process-item
        template: branch
        withParam: '{{workflow.parameters.input-payload}}'
    - - arguments:
          parameters:
          - name: numbers
            value: '{{steps.process-item.outputs.parameters.count-hellos}}'
        name: sum-hellos
        templateRef:
          name: script-templates
          template: sum
      - arguments:
          parameters:
          - name: numbers
            value: '{{steps.process-item.outputs.parameters.count-goodbyes}}'
        name: sum-goodbyes
        templateRef:
          name: script-templates
          template: sum
    - - arguments:
          parameters:
          - name: table-name
            value: '{{workflow.parameters.mysql-table-name}}'
          - name: db-connection-secret
            value: '{{workflow.parameters.mysql-connection-secret}}'
          - name: sum-hello
            value: '{{steps.sum-hellos.outputs.result}}'
          - name: sum-goodbye
            value: '{{steps.sum-goodbyes.outputs.result}}'
        name: write-result
        templateRef:
          name: script-templates
          template: write-to-db
  - inputs:
      parameters:
      - name: names
    name: branch
    outputs:
      parameters:
      - name: count-hellos
        valueFrom:
          parameter: '{{steps.count-hellos.outputs.result}}'
      - name: count-goodbyes
        valueFrom:
          parameter: '{{steps.count-goodbyes.outputs.result}}'
    steps:
    - - arguments:
          parameters:
          - name: greeting
            value: hello
          - name: names
            value: '{{inputs.parameters.names}}'
        name: hellos
        templateRef:
          name: container-templates
          template: greet
    - - arguments:
          artifacts:
          - from: '{{steps.hellos.outputs.artifacts.output-file}}'
            name: input-file
          parameters:
          - name: search
            value: hello
          - name: replace
            value: goodbye
          - name: input-key
            value: '{{item}}'
        name: goodbyes
        templateRef:
          name: container-templates
          template: replace-text
    - - arguments:
          artifacts:
          - from: '{{steps.hellos.outputs.artifacts.output-file}}'
            name: input-file
          parameters:
          - name: string
            value: hello
        name: count-hellos
        templateRef:
          name: container-templates
          template: count
      - arguments:
          artifacts:
          - from: '{{steps.goodbyes.outputs.artifacts.output-file}}'
            name: input-file
          parameters:
          - name: string
            value: goodbye
        name: count-goodbyes
        templateRef:
          name: container-templates
          template: count
