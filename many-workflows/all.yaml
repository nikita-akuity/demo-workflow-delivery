apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::541216676946:role/arkose-demo-many-wf-dev
  name: arkose-demo
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: operate-workflow-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: executor
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflowtaskresults
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: operate-workflow-role
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflowtemplates
  - cronworkflows
  - clusterworkflowtemplates
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: executor-demo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: executor
subjects:
- kind: ServiceAccount
  name: arkose-demo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: operate-workflow-demo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: operate-workflow-role
subjects:
- kind: ServiceAccount
  name: arkose-demo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: operate-workflow-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: operate-workflow-role
subjects:
- kind: ServiceAccount
  name: operate-workflow-sa
---
apiVersion: v1
data:
  goodbye-s3: |
    s3:
      endpoint: s3.amazonaws.com
      bucket: akuity-arkose-demo
      region: us-west-1
      useSDKCreds: true
      keyFormat: "dev/many-wf/goodbyes\
        /{{workflow.creationTimestamp.Y}}-\
        {{workflow.creationTimestamp.m}}-\
        {{workflow.creationTimestamp.d}}\
        /{{workflow.creationTimestamp.H}}"
  hello-s3: |
    s3:
      endpoint: s3.amazonaws.com
      bucket: akuity-arkose-demo
      region: us-west-1
      useSDKCreds: true
      keyFormat: "dev/many-wf/hellos\
        /{{workflow.creationTimestamp.Y}}-\
        {{workflow.creationTimestamp.m}}-\
        {{workflow.creationTimestamp.d}}\
        /{{workflow.creationTimestamp.H}}"
kind: ConfigMap
metadata:
  annotations:
    workflows.argoproj.io/default-artifact-repository: demo-s3
  name: dev-artifact-repositories
---
apiVersion: v1
data:
  table-name: dev_statistics
kind: ConfigMap
metadata:
  labels:
    workflows.argoproj.io/configmap-type: Parameter
  name: dev-parameters
---
apiVersion: v1
data:
  example-goodbye-s3: |
    s3:
      endpoint: s3.amazonaws.com
      bucket: example-bucket-name
      region: us-west-1
      useSDKCreds: true
      keyFormat: "prefix/goodbyes\
        /{{workflow.creationTimestamp.Y}}-\
        {{workflow.creationTimestamp.m}}-\
        {{workflow.creationTimestamp.d}}\
        /{{workflow.creationTimestamp.H}}"
  example-hello-s3: |
    s3:
      endpoint: s3.amazonaws.com
      bucket: example-bucket-name
      region: us-west-1
      useSDKCreds: true
      keyFormat: "prefix/hellos\
        /{{workflow.creationTimestamp.Y}}-\
        {{workflow.creationTimestamp.m}}-\
        {{workflow.creationTimestamp.d}}\
        /{{workflow.creationTimestamp.H}}"
kind: ConfigMap
metadata:
  name: example-artifact-repositories
---
apiVersion: v1
data:
  table-name: results
kind: ConfigMap
metadata:
  labels:
    workflows.argoproj.io/configmap-type: Parameter
  name: example-parameters
---
apiVersion: v1
data:
  DB_HOST: ZGIuaG9zdG5hbWU=
  DB_NAME: ZGF0YWJhc2VfbmFtZQ==
  DB_PASSWORD: c2VjcmV0UGFzc1cwcmQ=
  DB_PORT: MzYwMA==
  DB_USER: ZGF0YWJhc2VfdXNlcg==
kind: Secret
metadata:
  name: example-db-connect
type: Opaque
---
apiVersion: argoproj.io/v1alpha1
kind: EventBus
metadata:
  name: default
spec:
  nats:
    native:
      auth: token
      replicas: 3
---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: calendar
spec:
  calendar:
    every-seven-minutes:
      interval: 7m
      metadata:
        names: Hong,Jesse,Alex
    ten-past-hour:
      schedule: '*/5 * * * *'
---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: s3-sqs
spec:
  sqs:
    object-created:
      filter:
        expression: (len(body.Records)==1) && (body.Records[0].eventSource == 'aws:s3')
          && (body.Records[0].eventName startsWith 'ObjectCreated')
      jsonBody: true
      queue: arkose-demo-s3-notification
      region: us-west-1
      waitTimeSeconds: 20
  template:
    serviceAccountName: arkose-demo
---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: webhook
spec:
  service:
    ports:
    - port: 12000
      targetPort: 12000
  webhook:
    greet:
      endpoint: /greet
      method: POST
      port: "12000"
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: aws-sqs
spec:
  dependencies:
  - eventName: object-created
    eventSourceName: s3-sqs
    filters:
      data:
      - path: body.Records.0.s3.bucket.name
        type: string
        value:
        - akuity-arkose-demo
      - path: body.Records.0.s3.object.key
        type: string
        value:
        - ^dev/many-wf/hellos/
    name: sqs-hello-dep
  template:
    serviceAccountName: arkose-demo
  triggers:
  - template:
      argoWorkflow:
        operation: submit
        parameters:
        - dest: spec.arguments.parameters.0.value
          src:
            dataKey: body.Records.0.s3.bucket.name
            dependencyName: sqs-hello-dep
        - dest: spec.arguments.parameters.1.value
          src:
            dataKey: body.Records.0.s3.object.key
            dependencyName: sqs-hello-dep
        source:
          resource:
            apiVersion: argoproj.io/v1alpha1
            kind: Workflow
            metadata:
              generateName: replace-
            spec:
              arguments:
                parameters:
                - name: bucket
                  value: example-bucket
                - name: key
                  value: ""
              workflowTemplateRef:
                name: goodbye-wf-template
      conditions: sqs-hello-dep
      name: sqs-workflow-replace
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: count-all
spec:
  dependencies:
  - eventName: ten-past-hour
    eventSourceName: calendar
    name: cal-dep
    transform:
      script: |-
        pattern="(%d+)-(%d+)-(%d+) (%d+):(%d+):(%d+)"
        year,month,day,hour,min,sec=event.eventTime:match(pattern)
        target_time=os.time({day=day,month=month,year=year,hour=hour-1,min=min,sec=sec})
        event.metadata.targetTime=os.date("%Y-%m-%d %H:%M:%S")
  template:
    serviceAccountName: operate-workflow-sa
  triggers:
  - template:
      argoWorkflow:
        operation: submit
        parameters:
        - dest: spec.arguments.parameters.0.value
          src:
            dataKey: metadata.targetTime
            dependencyName: cal-dep
        source:
          resource:
            apiVersion: argoproj.io/v1alpha1
            kind: Workflow
            metadata:
              generateName: count-
            spec:
              arguments:
                parameters:
                - name: timestamp
                  value: ""
              workflowTemplateRef:
                name: count-wf-template
      name: webhook-workflow-trigger
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: start-pipeline
spec:
  dependencies:
  - eventName: greet
    eventSourceName: webhook
    name: wh-dep
  - eventName: every-seven-minutes
    eventSourceName: calendar
    name: cal-dep
  template:
    serviceAccountName: operate-workflow-sa
  triggers:
  - template:
      argoWorkflow:
        operation: submit
        parameters:
        - dest: spec.arguments.parameters.0.value
          src:
            dataKey: body.names
            dependencyName: wh-dep
        - dest: spec.arguments.parameters.0.value
          src:
            dataKey: metadata.names
            dependencyName: cal-dep
            value: Default,Names
        source:
          resource:
            apiVersion: argoproj.io/v1alpha1
            kind: Workflow
            metadata:
              generateName: greet-
            spec:
              arguments:
                parameters:
                - name: names
                  value: to,be,replaced
              workflowTemplateRef:
                name: hello-wf-template
      conditions: wh-dep || cal-dep
      name: webhook-workflow-trigger
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: count-wf-template
spec:
  arguments:
    parameters:
    - name: timestamp
      value: 2000-01-01 12:00
  entrypoint: count-all
  templates:
  - name: count-all
    steps:
    - - arguments:
          parameters:
          - name: folder
            value: '{{workflow.parameters.timestamp}}'
        name: list-files
        template: list-files
  - inputs:
      parameters:
      - default: .
        name: folder
    name: list-files
    script:
      command:
      - bash
      image: bash
      source: |
        echo {{inputs.parameters.folder}}
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: goodbye-wf-template
spec:
  arguments:
    artifacts:
    - name: input-file
      s3:
        bucket: '{{workflow.parameters.bucket}}'
        key: '{{workflow.parameters.key}}'
    parameters:
    - name: bucket
      value: example-bucket
    - name: key
      value: example/input.txt
  artifactRepositoryRef:
    configMap: dev-artifact-repositories
    key: goodbye-s3
  entrypoint: replace-text
  serviceAccountName: arkose-demo
  templates:
  - container:
      args:
      - --input-file
      - /tmp/in.txt
      - --output-file
      - /tmp/{{pod.name}}.txt
      - --search
      - hello
      - --replace
      - goodbye
      command:
      - python
      - rt.py
      image: ghcr.io/nikita-akuity/replace-text:sha-1882e20
    inputs:
      artifacts:
      - name: input-file
        path: /tmp/in.txt
    name: replace-text
    outputs:
      artifacts:
      - archive:
          none: {}
        name: output-file
        path: /tmp/{{pod.name}}.txt
---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: hello-wf-template
spec:
  arguments:
    parameters:
    - name: names
      value: ""
  artifactRepositoryRef:
    configMap: dev-artifact-repositories
    key: hello-s3
  entrypoint: greet
  serviceAccountName: arkose-demo
  templates:
  - container:
      args:
      - --names
      - '{{workflow.parameters.names}}'
      - --greeting
      - hello
      - --output-file
      - /tmp/{{pod.name}}.txt
      command:
      - python
      - greet.py
      image: ghcr.io/nikita-akuity/greetings:sha-1882e20
    name: greet
    outputs:
      artifacts:
      - archive:
          none: {}
        name: output-file
        path: /tmp/{{pod.name}}.txt
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: db-connection-dev
spec:
  data:
  - remoteRef:
      key: arkose-demo/db/many-wf-dev
      property: host
    secretKey: DB_HOST
  - remoteRef:
      key: arkose-demo/db/many-wf-dev
      property: port
    secretKey: DB_PORT
  - remoteRef:
      key: arkose-demo/db/many-wf-dev
      property: database
    secretKey: DB_NAME
  - remoteRef:
      key: arkose-demo/db/many-wf-dev
      property: user
    secretKey: DB_USER
  - remoteRef:
      key: arkose-demo/db/many-wf-dev
      property: password
    secretKey: DB_PASSWORD
  refreshInterval: 10m
  secretStoreRef:
    kind: SecretStore
    name: demo-db-connect
  target:
    name: db-connection-dev
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: demo-db-connect
spec:
  provider:
    aws:
      auth:
        jwt:
          serviceAccountRef:
            name: arkose-demo
      region: us-west-1
      service: SecretsManager
